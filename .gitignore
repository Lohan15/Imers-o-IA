!pip install -q google-generativeai spotipy

import os
import google.generativeai as genai
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from google.colab import userdata
import random
import time


print("🔍 Verificando configurações necessárias...")
time.sleep(1)

try:

    os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')
    os.environ["SPOTIPY_CLIENT_ID"] = userdata.get('SPOTIPY_CLIENT_ID')
    os.environ["SPOTIPY_CLIENT_SECRET"] = userdata.get('SPOTIPY_CLIENT_SECRET')
    print("✅ Chaves de API configuradas com sucesso!")
except Exception as e:
    print(f"😕 Opa, algo deu errado: {e}")
    print("Por favor, verifique se você configurou corretamente as chaves no painel de segredos.")
    exit(1)
except Exception as e:
    print(f"😕 Opa, algo deu errado: {e}")
    print("Por favor, verifique se você configurou corretamente as chaves no painel de segredos.")
    exit(1)


print("\n💡 Iniciando serviços...")
time.sleep(1)

try:
    genai.configure(api_key=os.environ["GOOGLE_API_KEY"])
    modelo = genai.GenerativeModel("gemini-2.0-flash")
    print("🧠 IA emocional pronta para conversar!")
except Exception as e:
    print(f"🤖 Ops! Problema ao conectar com a IA: {e}")
    exit(1)

try:
    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
        client_id=os.environ["SPOTIPY_CLIENT_ID"],
        client_secret=os.environ["SPOTIPY_CLIENT_SECRET"]
    ))
    print("🎵 Conexão com Spotify estabelecida!")
except Exception as e:
    print(f"🎶 Ah não! Spotify indisponível: {e}")
    exit(1)

print("\n✨ Tudo pronto! Vamos começar nossa conversa!\n")
time.sleep(1)

historico_musicas = set()


saudacoes = [
    "Oi! Como você está se sentindo hoje?",
    "Olá! Quer compartilhar como está seu dia?",
    "Oi :) No que está pensando agora?",
    "E aí? Tudo bem com você?",
    "Oi, amigo! Como vai o coração hoje?"
]

despedidas = [
    "Até mais! Lembre-se: você é incrível!",
    "Foi ótimo conversar com você! Volte quando quiser :)",
    "Tchauzinho! Se cuida, ok?",
    "Até a próxima! Estarei aqui se precisar.",
    "Vou ficar por aqui. Qualquer hora você me chama!"
]

def mostrar_carregamento():
    for _ in range(3):
        print(".", end="", flush=True)
        time.sleep(0.5)
    print()

def detectar_emocao(texto):
    prompt = f"""
    Analise este texto com sensibilidade: "{texto}"
    Identifique a emoção predominante usando apenas uma destas palavras:
    feliz, triste, ansioso, relaxado, estressado, apaixonado, solitário, irritado, calmo, empolgado.
    Se não for claro, responda 'indefinido'.
    """
    try:
        print("\n🤔 Analisando suas palavras", end="")
        mostrar_carregamento()
        resposta = modelo.generate_content(prompt)
        emocao = resposta.text.strip().lower()
        return emocao if emocao in ["feliz", "triste", "ansioso", "relaxado", "estressado",
                                  "apaixonado", "solitário", "irritado", "calmo", "empolgado"] else "indefinido"
    except Exception as e:
        print(f"\n😅 Não consegui entender direito suas emoções agora")
        return "indefinido"

def recomendar_genero(emocao):
    mapa_emocional = {
        "triste": ["música calma e encorajadora", "folk acústico", "indie suave"],
        "feliz": ["pop animado", "funk brasileiro", "música disco"],
        "ansioso": ["lo-fi relaxante", "jazz suave", "sons da natureza"],
        "relaxado": ["instrumental chill", "bossa nova", "música ambiente"],
        "estressado": ["sons da natureza", "música clássica", "meditação guiada"],
        "apaixonado": ["romântico acústico", "MPB", "R&B suave"],
        "solitário": ["acústico melancólico", "blues", "indie folk"],
        "irritado": ["rock pesado", "metal", "punk rock"],
        "calmo": ["música ambiente", "new age", "piano instrumental"],
        "empolgado": ["eletrônica dançante", "house music", "techno"],
        "indefinido": ["lo-fi", "música ambiente", "playlist aleatória"]
    }
    return random.choice(mapa_emocional.get(emocao, ["lo-fi"]))

def buscar_musica(query):
    try:
        print("\n🔍 Procurando uma música especial para você", end="")
        mostrar_carregamento()

        resultados = sp.search(q=query, type="track", limit=10)

        if resultados and resultados.get("tracks") and resultados["tracks"]["items"]:
            for item in resultados['tracks']['items']:
                nome = item['name']
                artista = item['artists'][0]['name']
                url = item['external_urls']['spotify']
                chave = (nome, artista)

                if chave not in historico_musicas:
                    historico_musicas.add(chave)
                    return {
                        "nome": nome,
                        "artista": artista,
                        "url": url,
                        "popularidade": item.get('popularity', 0)
                    }


        resultados = sp.search(q=random.choice(["lo-fi", "música relaxante", "instrumental"]),
                             type="track", limit=1)

        if resultados and resultados.get("tracks") and resultados["tracks"]["items"]:
            item = resultados['tracks']['items'][0]
            return {
                "nome": item['name'],
                "artista": item['artists'][0]['name'],
                "url": item['external_urls']['spotify'],
                "popularidade": item.get('popularity', 0)
            }

    except Exception as e:
        print(f"\n🎶 Opa, tive um probleminha para achar músicas: {e}")

    return None

def responder_usuario(texto, emocao):
    prompts_empaticos = [
        f"""Você é um amigo sensível e atencioso. Alguém compartilhou: "{texto}"
        Demonstre que realmente entendeu o sentimento {emocao} por trás dessa mensagem.
        Responda de forma calorosa, como um bom amigo faria, mostrando que você:
        1. Compreende o que eles estão sentindo
        2. Se importa genuinamente
        3. Oferece apoio sem ser clichê
        Seja natural, como em uma conversa real.""",

        f"""Imagine que um amigo chegou pra você e disse: "{texto}"
        Considerando que eles parecem estar se sentindo {emocao}, como você responderia?
        Seja empático, evite clichês e mostre que realmente ouviu o que eles disseram.
        Uma resposta de verdadeiro amigo:""",

        f"""Com base nesta mensagem: "{texto}"
        O sentimento principal parece ser {emocao}.
        Escreva uma resposta que:
        - Valide os sentimentos da pessoa
        - Mostre compreensão genuína
        - Ofereça conforto de forma natural
        - Não seja muito longo nem muito curto
        Lembre: você é um amigo, não um terapeuta!"""
    ]

    try:
        print("\n💭 Pensando em uma resposta significativa", end="")
        mostrar_carregamento()

        resposta = modelo.generate_content(random.choice(prompts_empaticos))
        return resposta.text.strip()
    except Exception as e:
        print(f"\n😅 Me perdi um pouco nos pensamentos aqui")
        return random.choice([
            "Hmm, preciso pensar melhor sobre isso...",
            "Deixe-me refletir sobre o que você disse...",
            "Isso me fez pensar... você poderia falar mais?",
            "Interessante... como isso tem feito você se sentir?"
        ])

def iniciar_conversa():
    print("\n" + "🌟"*20)
    print(random.choice(saudacoes))
    print("🌟"*20 + "\n")

    emocao_anterior = None
    genero_anterior = None

    while True:
        try:
            entrada = input("Você: ").strip()

            if not entrada:
                print("\n" + random.choice([
                    "Fique à vontade para compartilhar quando quiser...",
                    "Estou aqui quando você precisar conversar :)",
                    "Sempre que quiser bater um papo, é só chamar!"
                ]))
                continue

            if entrada.lower() in ["sair", "tchau", "adeus", "xau", "flw"]:
                print("\n" + random.choice(despedidas))
                break

            if any(palavra in entrada.lower() for palavra in ["outra música", "mais música", "nova música"]):
                if genero_anterior:
                    sugestao = buscar_musica(genero_anterior)
                    if sugestao:
                        print(f"\n🎵 Sugestão musical: '{sugestao['nome']}' do {sugestao['artista']}")
                        print(f"🔗 Abrir no Spotify: {sugestao['url']}")
                    else:
                        print("\n🤔 Não encontrei nada agora... que tal me contar como você está?")
                else:
                    print("\n🎶 Antes de sugerir músicas, me conte como você está se sentindo :)")
                continue

            emocao_atual = detectar_emocao(entrada)
            genero_atual = recomendar_genero(emocao_atual)

            resposta = responder_usuario(entrada, emocao_atual)

            print(f"\nIA [{emocao_atual.capitalize()}]: {resposta}")

            sugestao = buscar_musica(genero_atual)
            if sugestao:
                print(f"\n🎧 Recomendação musical para seu momento:")
                print(f"🎶 '{sugestao['nome']}' - {sugestao['artista']}")
                print(f"⭐ Popularidade: {'★' * (sugestao['popularidade'] // 20)}")
                print(f"🔗 Ouça aqui: {sugestao['url']}")
            else:
                print("\n🎶 A música perfeita para esse momento parece estar escondida...")

            emocao_anterior = emocao_atual
            genero_anterior = genero_atual

        except KeyboardInterrupt:
            print("\n\n" + random.choice([
                "Tudo bem, vamos parar por aqui...",
                "Entendi, podemos continuar outro dia :)",
                "Vou ficar por aqui então. Até mais!"
            ]))
            break
        except Exception as e:
            print("\n😅 Opa, algo estranho aconteceu... Vamos recomeçar?")
            continue

if __name__ == "__main__":
    iniciar_conversa()
